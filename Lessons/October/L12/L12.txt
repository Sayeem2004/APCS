AP COMP SCI A 1 OF 2
8
Lesson-12
Rick Platek
â€¢
Oct 26

================================================================================
Task #1: From the previous lesson.
================================================================================
	-- In google classroom, for all the programs that you have submitted
           and are not graded, please do one of the following:

             1. Put your name in the documentation.
	     2. Change the names of your files to
	        ClassName-last-first.java
	    	ex. Distinct-Doe-Jane.java

        -- Goal for the week is to complete week 3 of the Coursera course
	   Computer Science : Programming with a purpose.



======================================================================
Task #2. Working with arrays.
======================================================================

1. Dice Simulation.
   The following code computes the exact probability
   distribution for the sum of two dice:

                int [] frequencies = new int[13];
                for (int i = 1; i <= 6; i++)
                    for (int j = 1; j <= 6; j++)
                        frequencies[i + j]++;

                 // Here's a trace
 		 //          0  1  2  3  4  5  6  7  8  9 10 11 12
		 // freq = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		 // i = 1  j -> 1,2,3,4,5,6
        	 // freq = { 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0}
		 // i = 2  j -> 1,2,3,4,5,6
		 // freq = { 0, 0, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0}
                 // *********** Complete the rest of the trace ****
		 // i = 3  j -> 1,2,3,4,5,6
		 // freq = { 0, 0, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0}
		 // i = 4  j -> 1,2,3,4,5,6
        	 // freq = { 0, 0, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0}
		 // i = 5  j -> 1,2,3,4,5,6
		 // freq = { 0, 0, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0}
		 // i = 6  j -> 1,2,3,4,5,6
		 // freq = { 0, 0, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0}


                double[] probabilities = new double[13];
                for (int k = 1; k <= 12; k++)
                    probabilities[k] = frequencies[k] / 36.0;


     The value of probabilities[k] is the probability that the dice
     sum to k. Run experiments that validate this calculation by
     simulating n dice throws, keeping track of the frequencies of
     occurrence of each value when you compute the sum of two uniformly
     random integers between 1 and 6. How large does n have to be before
     your empirical results match the exact results to three decimal
     places.


============================================================================
Task #2: Building a Histogram - Histogram.java
============================================================================

1. Write Histogram.java that takes one command-line argument n
   and builds a histogram.


   a. Create and initialize a[] to store n uniformly random numbers from 0 to
      100 inclusive.


   b.  The for-each poop.
       Often used to iterate in order through the elements of an array.

       var is assign the first element of the array
       then the second element, and so on.

       for (type var : array)
        < do something with var >

      ex. int b[] = {1,2,3};
          int sum = 0;
          for (int x : b)
            sum += x;

        Use a for-each loop to print each of the n integers. Seperate each
        integer with a space.
	  ex.  if n = 3
	       5 23 88

     c. Display a histogram of the numbers, divided into the ranges 0-9,
        10-19, 20-29, 30-39, 40-49, 50-59, 60-69, 70-79, 80-89, 90-99, and
	100. Your program should match the format shown in the sample run
	as closely as possible.

        Try using the System.out.printf() method to align the numbers in
	the table.

        --- System.out.printf(format-string, number);

            ex. System.out.printf("%14d",512)
	        outputs "          512"

	     System.out.printf("%-14d",512)
	        outputs "512          "

           d  code for an integer
           14 is the field width
           -  indicates left justified

	 --- Sample runs

          $ java Histogram 20
	  a[] : 33 67 39 36 32 82 17 9 56 81 20 13 62 77 45 79 95 97 99 11
  	    0: *
 	   10: ***
 	   20: *
 	   30: ****
 	   40: *
 	   50: *
 	   60: **
 	   70: **
 	   80: **
 	   90: ***
	  100:
============================================================================
Task #3: Find the longest plateau.(LongestPlateau.java).
============================================================================

  Given an array of integers, find the length and location of the longest
  contiguous sequence of equal values for which the values of the elements
  just before and just after this sequence are smaller. The program
  LongestPlateau should take n integer command-line arguments, then print
  the starting position and length of the longest plateau.


  Test Cases:

  $ java LongestPlateau 1 1 1 1 1 1
    start: -1
    length : 0


 $ java LongestPlateau 1 2 2 1 3 3 3 3 3 1
    start: 4
    length : 5

 $ java LongestPlateau 1 2 2 1 2 2 1
    start: 1
    length : 2


  $ java LongestPlateau 1 2 2 2
    start: -1
    length : 0
Class comments

Lesson-12
