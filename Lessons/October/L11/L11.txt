AP COMP SCI A 1 OF 2
8
Lesson-11
Rick Platek
â€¢
Oct 22

================================================================================
Task #1: From the previous lesson.
================================================================================

--- Arrays - Definitions

    1. A data structure is a way to organize data in a computer.

    2. A one-dimensional array is a data structure that stores a sequence
       of values , all of the same type.

    3. The components of the array are referred to as its elements.

    4. Indexing is used to refer to the array elements. If we have n
       elements in an array, we think of the elements as being numbered
       from 0 to n-1 so that we can unambiguously specify an element with
       an integer index in this range.


---  Memory allocation occurs at runtime since n is unknown at
     compile time.

   int n = Integer.parseInt(args[0]);
   int[] a = new int[n];



---   Java automatically initializes arrays when you create then,
      so that creating an array takes time proportional to its length.
          Type                 Default value
          int                  0
          double               0.0
          boolean              false
          String               null

--- Model of Computer memory
    - On modern computers, memory is implemented in hardward as a sequence
      of memory locations, each of which can be accessed with an appropriate
      index.
    - when reffering to computer memory, we refer to the location's index
      as its "address" (integer represented as a hexadecimal).


    Consider this code:

    int [] a = new int[5];

    for (int i = 0; i < 5; i++)
      	a[i]  = 2 * i;

--   Two step process to allocate memory.

    1. The variable a refers to a memory address whose element
       is the address of the first element in the
       array. The next memory address stores the length of the
       array.

    2. The memory will be scanned for a contiguous
       unoccupied block of memory to store the
       elements of the array.




 Model of Memory Allocation
--------------------------------------------------------
    memory address        element stored at this address
    (Hexadecimal)
        0x001              occupied
        0x002              0x006          <- a
    	0x003              5              <- a.length
    	0x004              occupied
    	0x005              occupied
    	0x006              0              <- a[0]
    	0x007              2              <- a[1]
    	0x008              4              <- a[2]
    	0x009              6              <- a[3]
    	0x00A              8              <- a[4]
    	0x00B              open
    	0x00C              open
    	0x00D              occupied
    	0x00E              open
    	0x00F		   occupied
    	0x010              open
    	0x011		   open






   Question #1:



        Do the same for this code:

          int n = 10;
	  int [] a = new int[10];
	  a[0] = 1;
	  a[1] = 2;
	  for (int i = 2 ; i < n; i++)
	       a[i] = a[i-1] + a[i - 2];



  Question #2:

           What does the following code fragment print?

           int [] a = {1,2,3};
	   int [] b = {1,2,3};
	   System.out.println(a == b);


  Question #3:

            Write a program HowMany that takes a variable number of command-line
	    arguments and prints how many there are.


            public class HowMany{

                  public static void main(String [] args){
                      // ***** YOUR CODE GOES HERE **********
                  }
            }



  Question #4:

            Write a program DiscreteDistribution that takes a variable number of
	    integer command-line arguments and prints the integer i with probability
	    proportional to the ith command-line argument.

	    Sample runs:
    	    // six equally likely events
   	    $ java DiscreteDistribution 1 1 1 1 1 1
   	    3

 	    $ java DiscreteDistribution 1 1 1 1 1 1
            0

            // six events, one 3x more likely than the others
            $ java DiscreteDistribution 1 1 1 1 1 3
            5

            $ java DiscreteDistribution 1 1 1 1 1 3
            2

            $ java DiscreteDistribution 1 1 1 1 1 3

======================================================================
Task #2. Working with arrays.
======================================================================
1. Write a code fragment that reverses the order of the values in a
   one-dimensional string array. Do not create another array to hold
   the result.






2. Dice Simulation.
   The following code computes the exact probability
   distribution for the sum of two dice:

                int [] frequencies = new int[13];
                for (int i = 1; i <= 6; i++)
                    for (int j = 1; j <= 6; j++)
                        frequencies[i + j]++;

                 // Here's a trace
 		 //          0  1  2  3  4  5  6  7  8  9 10 11 12
		 // freq = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		 // i = 1  j -> 1,2,3,4,5,6
        	 // freq = { 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0}
		 // i = 2  j -> 1,2,3,4,5,6
		 // freq = { 0, 0, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0}
                 // *********** Complete the rest of the trace ****
		 // i = 3  j -> 1,2,3,4,5,6
		 // freq = { 0, 0, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0}
		 // i = 4  j -> 1,2,3,4,5,6
        	 // freq = { 0, 0, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0}
		 // i = 5  j -> 1,2,3,4,5,6
		 // freq = { 0, 0, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0}
		 // i = 6  j -> 1,2,3,4,5,6
		 // freq = { 0, 0, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0}


                double[] probabilities = new double[13];
                for (int k = 1; k <= 12; k++)
                    probabilities[k] = frequencies[k] / 36.0;


     The value of probabilities[k] is the probability that the dice
     sum to k. Run experiments that validate this calculation by
     simulating n dice throws, keeping track of the frequencies of
     occurrence of each value when you compute the sum of two uniformly
     random integers between 1 and 6. How large does n have to be before
     your empirical results match the exact results to three decimal
     places.


3. Discrete Distribution Verification.

   Modify the program DiscreteDistribution.java to run experiments in order
   to verify that the results are correct.The program should take an extra
   command-line argument,trials, representing the number of trials for the
   experiment.

    Here's a sample run.

    $java DiscreteDistribution 1 2 1 10000000
    1	2499723	0.2499723
    2	5000594	0.5000594
    1	2499683	0.2499683


    The first column is the first 3 arguments, second is the observed frequency,
    and the third column is the observed probability.
Class comments

Lesson-11
