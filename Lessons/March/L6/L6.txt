Data Structures
Period 6
Lesson-06
Rick Platek
â€¢
8:14 AM

lesson.txt
Text

Data Structure Visualization
https://www.cs.usfca.edu/~galles/visualization/Algorithms.html
Class comments


Lesson-06
==========================================================================
Topic #1: The Queue ADT
==========================================================================

  A queue is characterized by its First In First Out (FIFO)
  behavior. The item in the queue the longest is the next
  to be removed.
     ex. Movie Ticket Lines

  The front of the queue is commonly known as the head.
  The back of the queue is commonly known as the tail.
  The operation to add an element is known as an enqueue.
  Dequeue refers to removing an element.


Check out these Data Structures Visualizations

  https://www.cs.usfca.edu/~galles/visualization/Algorithms.html












===========================================================================
Topic #2: Java Collections Framework
===========================================================================

In Java, Stack is a class and Queue is an interface.


*** IT IS NOT LEGAL TO CONSTRUCT AND DECLARE A QUEUE LIKE THIS: ***

        Queue<String> queue = new Queue<String>();

The Java Queue Interface
====================================================================
- https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Queue.html

- java.util.Queue

- A subset of its methods.

  int      size()    Returns the number of elements currently on
  	   	     the queue.
  boolean  isEmpty() Returns true if the queue is empty.

  boolean  add(E)    Adds a value to the tail of the queue.

  E        remove()  Removes and returns the head of the queue.
                     Calling remove on an empty queue throws a
		     runtime error.

  E        peek()    Returns the value at the head of the queue without
                     removing it. Calling peek on an empty queue throws
		     a runtime error.
  E        clear()   Remove all the elements from a queue.



There are several concrete classes that implement the Queue interface.
The most common are:

      - ArrayDeque   (which stands for array double-ended queue and is
                      pronounced array-deck.)

      - LinkedList













=================================================================================
Topic #3: Queue Exercise (Individual work)
=================================================================================

********************************************************************************
*************** Individual Classwork *******************************************

1.  Write a non-recursive function

        public static void reverseQueue(Queue<String> queue)

    that reverses the elements in the queue. Remember that you have
    no access to the internal representation of the queue and must
    therefore come up with an algorithm - presumably involving other
    structures - that accomplish this task.


Be prepared to present your solution.


/*
 *
 *  Write a function
 *
 *       public static void reverseQueue(Queue<String> queue)
 *
 *   that reverses the elements in the queue. Remember that you have
 *   no access to the internal representation of the queue and must
 *   therefore come up with an algorithm - presumably involving other
 *   structures - that acoomplish this task.
 *
 * Compilation Instructions:
 * $javac ReverseQueue.java
 *
 * Execution Instructions:
 * $ java ReverseQueue arg0 arg1 ...
 *
 * Sample Run
 * $ java ReverseQueue alice ben carol dave eunice
 * queue: [alice, ben, carol, dave, eunice]
 * reversed queue: [eunice, dave, carol, ben, alice]
 *
 */




import java.util.*;

public class ReverseQueue{

    public static void reverseQueue(Queue<String> queue){
    	   // YOUR CODE GOES HERE
    }

    public static void main(String [] args){
	// Declare and create a queue.
	// Either one works
	//Queue <String> queue = new ArrayDeque<String>();
	Queue <String> queue = new LinkedList<String>();

	// Initialize the queue
	for (String s: args)
	    queue.add(s);

	// Print the results
	System.out.println("queue: " + queue);
	reverseQueue(queue);
	System.out.println("reversed queue: " + queue);

    }

}
*****************************************************************
******************* Individual Homework *************************

                     Assignment-13

2. Write a recursive version of reverseQueue(Queue<String> queue).
   In this version, you are not permitted to instantiate an auxiliary
   data structure.

   Use the following method heading:

      public static void reverseQueueR(Queue<String> queue)


   Place this second method in the ReverseQueue program, document
   your code (remember to put your name in the documentation) and
   sumbit the file ReverseQueue.java.














=================================================================================
Topic #4: Group work
          Queue Application: Checkout Line Simulator
=================================================================================

		Assignment-14

Submit the file : CheckoutLineSimulator.java

Write a program that simulates a checkout line, such as one you might encounter
in a supermarket.  Customers arrive at the checkout stand and get in
line.  Those customers wait until the cashier is free, at which point
they occupy the cashier for some period of time.  After the service time
is complete, the cashier is free to serve the next customer.

In each second, the simulation performs the following operations:

  1. Determine whether a new customer has arrived.  New customers arrive
     randomly, with a probability given by the constant ARRIVAL_PROBABILITY.
     The value of ARRIVAL_PROBABILITY is the first argument read from the
     command-line.



   2. If the cashier is busy with a customer, subtract one second from the time
      remaining to service this customer. When that count reaches zero, the current
      customer is finished.

   3. If the cashier is free, serve the next customer.  The service time
      is uniformly distributed between MIN_SERVICE_TIME and MAX_SERVICE_TIME.

      MIN_SERVICE_TIME is the second argument read from the command-line. Its
      units is in seconds.

      MAX_SERVICE_TIME is the third argument read from the command-lint. Its
      units is in minutes.

   4. Update the SIMULATION_TIME.
      SIMULATION_TIME is the fourth command-line arguement. Its units is in
      minutes.

   At the end of the simulation, the program displays the simulation
   parameters along with the results of the simulation.

Sample Runs:

$ java CheckoutLineSimulator 0.004 3 5 60
Simulation results given the following constants:
  SIMULATION_TIME:        60 min
  MIN_SERVICE_TIME:        3 sec
  MAX_SERVICE_TIME:      300 sec
  ARRIVAL_PROBABILITY: 0.004

Customers served:         17
Average waiting time:   2.59 min
Average queue length:   0.73


$ java CheckoutLineSimulator 0.004 3 5 60
Simulation results given the following constants:
  SIMULATION_TIME:        60 min
  MIN_SERVICE_TIME:        3 sec
  MAX_SERVICE_TIME:      300 sec
  ARRIVAL_PROBABILITY: 0.004

Customers served:         15
Average waiting time:   1.90 min
Average queue length:   0.50

$ java CheckoutLineSimulator 0.007 30 10 120
Simulation results given the following constants:
  SIMULATION_TIME:       120 min
  MIN_SERVICE_TIME:       30 sec
  MAX_SERVICE_TIME:      600 sec
  ARRIVAL_PROBABILITY: 0.007

Customers served:         20
Average waiting time:  43.05 min
Average queue length:  23.28

$ java CheckoutLineSimulator 0.007 30 10 120
Simulation results given the following constants:
  SIMULATION_TIME:       120 min
  MIN_SERVICE_TIME:       30 sec
  MAX_SERVICE_TIME:      600 sec
  ARRIVAL_PROBABILITY: 0.007

Customers served:         20
Average waiting time:  27.70 min
Average queue length:  11.09
lesson.txt
Displaying lesson.txt.
