AP COMP SCI A 1 OF 2
8
Lesson-32
Rick Platek
â€¢
8:41 AM
=============================================================================
Task #1: Hw
=============================================================================


3.   Write a  method that takes 2  arraylist of strings
     and creates a  new list by appending the elements of the second
     list to the end of the first list.
     ex. list1 = ["a","b"]
     list2 = ["c","d","e"]
     append(list1,list2) -> ["a","b","c","d","e"]
     append(list2, list1) -> ["c","d","e","a","b"]


    // Pre:   list1 and list2 are lists.
    // Post:  Returns a new list by appending the elements of list2 to the
    //        end of list1. NO SIDE EFFECTS ARE PRODUCED.
    public static  ArrayList<String> append(ArrayList<String> list1,
                                            ArrayList<String> list2){


4.  Write the method that takes an Arraylist of strings and reverses
    the order of the list as a side effect.

    ex. list before method call [ "a", "b", "c"]
    reverse(list)
    list after method call [ "c", "b", "a"]

    // Pre:  list != null
    // Post: Reverses the order of the elments of list
    public static void reverse(ArrayList<String> list){

5. Write the method merge(ArrayList<String> list1,
                          ArrayList<String> list2) that takes
      two sorted lists and creates a new sorted list by merging list1 and list2.
      NO SIDE EFFECTS ARE PRODUCED.

    public static ArrayList<String> merge(ArrayList<String> l1,
                                          ArrayList<String> l2){

    }

=============================================================================
Task #2: COMODIFICATION EXCEPTION
=============================================================================


    //     WARNING THIS CODE THROWS A COMODIFICATION EXCEPTION
    //     Within a for-each loop, never mutate the object you are
    //     iterating through.

    // Pre: list != null
    // Post: Produces the side effect that all occurrences of x
    //       are removed from list.
    public static void removeAll(ArrayList<String> list, String x) {
        for (String y : list)
            if (x.equals(y)) list.remove(x);     // mutates the list
    }

==============================================================================
Task #3: Wrapper classes
==============================================================================


An ArrayList can only store references to objects.

Thus,
        ArrayList<int> list;

will throw an excpetion since int is a primitive.

Java provides Wrapper classes to wrap a primitive into an object.

     Integer
     Double
     Character
     ...

This is an older now deprecated style.

     ArrayList<Integer> list = new ArrayList<Integer>();
     Integer x = new Integer(5);
     Double y = new Double(2.1);

This is preferred (modern).


      Integer a = 10;           // The primitive 10 is automatically converted to
                                // new Integer(10).
                                // This process is known as "Automatic Boxing"
      list.add(3);              // "Automatic Boxing"
      Double z = 1.0 * a;       // "Automatic Boxing "


"Autoboxing" is the process of adding or removing the wrapper classes as need.

--------------------------------------------------------------------------------------------
Questions:
--------------------------------------------------------------------------------------------
1. Consider the code:

   Integer x = 5;
   Integer y = new Integer(x);          // deprecated causes a warning

   Evaluate the following:

   a.   x == y -> False
   b.   x < y -> False
   c.   x > y -> False
   d.   x.equals(y) -> True
   e.   x + y -> 10


 2. Write the final contents when the following method is passed each list below:

   public static void arrayListMystery1(ArrayList<Integer> v) {
     for (int i = 0; i < v.size(); i++) {
         int n = v.get(i);
         if (n % 10 == 0) {
             v.remove(i);
             v.add(n);
         }
      }
   }

   a. {1,20,3,40} -> {1,20,3,40} -> {1,3,40,20} -> {1,3,20,40} -> {1,3,20,40}
   b. {80,3,40,20,7} -> {3,40,20,7,80} -> {3,20,7,80,40} -> {3,20,7,80,40} -> {3,20,7,40,80} -> {3,20,7,40,80}
   c. {40,20,60,1,80,30} -> {20,60,1,80,30,40} -> {20,1,80,30,40,60} -> {20,1,30,40,60,80} -> {20,1,30,60,80,40} -> {20,1,30,60,40,80} -> {20,1,30,60,40,80}


3.  What are the contents of the list after the following code executes?

    ArrayList<Integer> vec = new ArrayList<Integer>();

    for (int i = 1; i <= 5; i++) {
        vec.add(2 * i);         // {2, 4, 6, 8, 10}
    }

    int size = vec.size();

    for (int i = 0; i < size; i++) {
      vec.add(i, 42);    // add 42 at index i
    }

    System.out.println(vec); -> {42,42,42,42,42,2,4,6,8,10}



4.  What are the contents of the list after the following code executes?

    ArrayList<Integer> vec = new ArrayList<Integer>();
    for (int i = 1; i <= 8; i++) {
    	vec.add(10 * i);   //   0   1   2   3   4   5   6   7
    }                      // {10, 20, 30, 40, 50, 60, 70, 80}

    for (int i = 0; i < vec.size(); i++) {
        vec.remove(i);
    }

    System.out.println(vec); -> {20,40,60,80}



5. Write a method named addStars that accepts as a parameter an ArrayList of strings, and
   modifies the list by placing a "*" element between elements, as well as at the start
   and end of the list. For example, if a list named list contains
   {"the", "quick", "brown", "fox"}, the call of addStars(list);
   should modify it to store {"*", "the", "*", "quick", "*", "brown", "*", "fox", "*"}.


6. Write a method named deleteDuplicates that accepts as a parameter a sorted ArrayList of
   Strings and that removes any duplicate values from the list. For example, suppose that
   an ArrayList named list contains the values
   {"be", "be", "is", "not", "or", "question", "that", "the", "to", "to"}
   After calling deleteDuplicates(list); the list should store the following values:
   {"be", "is", "not", "or", "question", "that", "the", "to"}
   You should assume that the values in the list are sorted, and that therefore all of the
   duplicates will be grouped together.



7. Write a method named mirror that accepts an ArrayList of strings as a parameter and
   produces a mirrored copy of the list as output, with the original values followed by those
   same values in the opposite order. For example, if an ArrayList variable named list
   contains the values ["a", "b", "c"], after a call of mirror(list);
   it should contain ["a", "b", "c", "c", "b", "a"].

   You may assume that the list is not null and that no element of the array is null.

8. Write a method named removeAll that accepts as a parameter an ArrayList of strings along
   with an element value string, and modifies the list to remove all occurrences of that
   string. For example, if the list v contains {"a", "b", "c", "b", "b", "a", "b"}, the call
   of removeAll(v, "b"); should modify it to store {"a", "c", "a"}.

9. Write a method named removeEvenLength that accepts an ArrayList of strings as a parameter
    and that removes all of the strings of even length from the list. For example, if an
    ArrayList variable named list contains the values
    ["hi", "there", "how", "is", "it", "going", "good", "sirs"], the call of
    removeEvenLength(list); would change it to store ["there", "how", "going"].

10. Write a method named repeat that accepts an ArrayList of Strings and an integer k as
    parameters and that replaces each element with k copies of that element. For example,
    if the list stores the values ["how", "are", "you?"] before the method is called and
    k is 4, it should store the values
    ["how", "how", "how", "how", "are", "are", "are", "are", "you?", "you?", "you?", "you?"]
    after the method finishes executing. If k is 0 or negative, the list should be empty
    after the call.

Class comments

Lesson-32
