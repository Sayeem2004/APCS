AP COMP SCI A 1 OF 2
8
Lesson-22
Rick Platek
â€¢
Nov 25
============================================================================
Task #1: The successive approximation method for computing square roots.
============================================================================
   Be prepared to present the square root function that uses
   successive approximation until you reach the limit of the hardware's
   precision.

   Successive approximation to compute the the square root of x.

   Even though clients of the Math class typically don't need to understand
   how methods like sqrt work internally, the implementers of that library
   have to be able to design an effective algorithm and write the necessary
   code. If you were asked to implement the sqrt method without using the
   library version, there are many strategies you could adopt. One of the
   easiest strategies to understand is successive approximation, in which
   you make a guess at the solution and then refine that guess by choosing
   new values that move closer to the solution.

   You can use successive approximation to determine the square root of x
   by adopting the followig strategy:

   1. Begin by guessing atht the square root is x/2. Call that guess g.

   2. The actual square root must lie between g and x / g. At each step
      in the successive approximation, generate a new guess by averaging
      g and x / g.

   3. Repeat step 2 until the values g and x / g are as close together
      as the precision of the hardware allows. In Java, the best way to
      check for this condition is to test whether the average is equal
      to either of the vales used to generate it.

   Use this strategy to write your our implementation of the sqrt method.


============================================================================
Task #2: Using Princeton standard libraries to test your functions
============================================================================

   1. Be prepared to present the functions:
           createIntegerArray(int ... args)
	   majority(boolean,boolean,boolean)
	   eq (int [], int [])

   2. If necessary, download all of the Princeton standard libraries
       as a jar file: stdlib.jar.

       The stdlib.jar file is located here:

            https://introcs.cs.princeton.edu/java/stdlib/

       On this page, read the documentation for using the standard libraries.


    3. Write a static method createIntegerArray that uses a variadic parameter
       list and returns an integer array of the arguments.


       Example:
            createIntegerArray(1,2,3) -> {1,2,3}


        *** Use StdArrayIO.print(int[]) to test your code.

=============================================================================
Task #3: Fully testing the majority function.
=============================================================================


   Write a static method majority() that takes exactly three boolean
   arguments and returns true if at least two of the argument values
   are true, and false otherwise. Do not use an if or switch statement.


   *** Test your code on the domain of the majority function.
       Do this by creating a text file of all possible inputs.
       In Functions.java, use StdIn.readBoolean() to
       read the inputs from standard input.
       When you run the program, use the Unix shell
       redirection operator,<, to place the inputs onto the the
       standard input stream.

     ex.

         $javac -cp .:stdlib.jar Functions.java
	 $java -cp .:stdlib.jar Functions < test-cases.txt

==============================================================================
Task #4: The eq() function.
==============================================================================



   Write a static method eq() that takes two int arrays as arguments
   and returns true if the arrays have the same length and all corresponding
   pairs of elements are equal, and false otherwise.


   Test your code.





===========================================================================
Task #5: More function practice.
===========================================================================


1. Write a static method scale() that takes a double array as its
   argument and has the side effect of scaling the array so that each
   element is between 0 and 1 (by subtracting the minimum value from
   each element and then dividing each element by the distance
   between the minimum and maximum values).


   *** From the StdStats library use the functions
	    min(double[])
	    max(double[]).
       Test your code.

------------------------------------------------------------------------------

2. Write a static method reverse() that takes an array of strings as its
   argument and returns an array with the strings in reverse order. (Do
   no change the order of the strings in the argument array).
------------------------------------------------------------------------------

3. Write a static method reverseInplace() that takes an array of strings
   as its argument and produce the side effect of reversing the order
   of the strings in the argument array.
-----------------------------------------------------------------------------
4. Compose a program to rearrange a deck of n cards using the
   Gilbert-Shannon-Reeds model of a "riffle-shuffle." First, generate
   a random integer r according to a binomial distribution: flip a fair
   coin n times and let r be the number of heads. Now, divide the deck
   into two piles: the first r cards and the remaining n-r cards. To
   complete the shuffle, repeatedly take the top card from one of the
   two piles and put it on the bottom of a new pile. If there are n1 cards
   remaining in the first pile and n2 cards remaining in the second pile,
   choose the next card from the first pile with probability n1 / (n1 + n2)
   and from the second pile with probability n2 / (n1 + n2).

   Watch this video :https://www.youtube.com/watch?v=AxJubaijQbI
   to determine how many riffle shuffles you need to apply to a deck
   of 52 cards to produce a (nearly) uniformly shuffled deck.

   Write the program RiffleShuffle.java to demonstrate the result. Represent
   the 52 cards in an integer array(card[0], ... ,card[51) and your program
   should include a method riffleShuffe(int [] cards) that performs
   exactly 1 riffle shuffle via a side effect.

Functions.java
Java

lesson.txt
Text

stdlib.jar
Unknown File
Class comments

Lesson-22
Displaying lesson.txt.
