AP COMP SCI A 1 OF 2
8
Lesson-27
Rick Platek
•
Dec 11 (Edited Dec 15)



===========================================================================
Task #1: Computing Terms in the Fibonacci Sequence
===========================================================================

  Let  t_i be the ith term

  First 13 terms of the Fibonacci Sequence are:

  t_0 :   0
  t_1 :   1
  t_2 :   1
  t_3 :   2
  t_4 :   3
  t_5 :   5
  t_6 :   8
  t_7 :  13
  t_8 :  21
  t_9 :  34
  t_10:  55
  t_11 : 89
  t_12 :144



a. Write a recursive method to compute the ith term of the Fibonacci sequence.

   // precondition: n >= 0
   public static int fib (int n){
         // your code goes here
   }

b. How many function calls are made for fib(5)?


============================================================================
Task #2: An alternate recursive solution.
============================================================================

   Hopefully you see that the implementation of fib(int) in part (a). is
   highly inefficient, many people people are tempted to point the finger
   at recursion as the culprit. The problem in the Fibonacci example, however,
   has nothing to do with recursion per se but rather with the way in which
   recursion is used. By adopting a different strategy, it is possible to
   write a recursive implementation of the fib method in which the large-scale
   inefficiencies disappear completely.

   As is often the case when using recursion, the key to finding a more
   efficient solution lies in adopting a more general approach. The Fibonacci
   sequence is not the only sequence whose terms are defined by the recurrence
   relation

          t_n = t_(n-1) + t_(n-2).

   Depending on how you choose the first two terms, you can generate many
   different sequences. The traditional Fibonacci sequence

      0,1,1,2,3,5,13,21,34,55,89,144,...

   comes from defining t_0 = 0 and t_1 = 1. If, for example, you defined
   t_0 = 3 and t_1 = 7, you would get this sequence instead:

     3,7,10,17,27,44,71,115,186,301,487,788,1275,...

   Similarly, defining t_0 = -1 and t_1 = 2 gives rise to the following
   sequence:

     -1,2,1,3,4,7,11,18,29,47,76,123,199,...

   These sequences all use the same recurrence relation, which specifies that
   each new term is the sum of the preceding two. The only way the sequences
   differ is in the choice of the first two terms. As a general class, sequences
   that follow this pattern are called additive sequences.

   This concept of an additive sequence makes it possibleto convert the problem
   of finding the nth term in the Fibonacci sequence into the more general problem
   of finding the nth term in an additive sequence whose initial terms are t_0 and
   t_1. Such a method requires three arguments and might be expressed in Java as
   a method with the following method signature.

        // preconditin: n >= 0, t0 is the first term, t1 is the
	//              second term.
        public static int additiveSequence(int n, int t0, int t1)



  a. Use recursion to implement the additiveSequence(int,int,int) method.


  b. Rewrite the fib(int) method as a wrapper method of additiveSequence(int,int,int).


  c. How many function calls are made for fib(5)?



=============================================================================
Task #2:  Group work : up to 3 people per group.
=============================================================================

 For each of the following problems:
    - Do not use features of the Java language that we have not covered in class.
    - Demonstrate the appropriate use of static methods.
    - Demonstrate the appropriate use of the Princeton libraries (stdlib.jar).
    - Design a main method that demonstrates the correctness of your
      solution.
    - Be prepared to present your solutions when I visit your break out room.



 1. Write a static method lg() that takes an int argument n and returns
    the largest integer not larger than the base-2 logarithm of n. Do not use
    the Math library.

 2. Write a static method histogram() that takes an int array a[] and an
    integer m as arguments and returns an array of length m whose ith element
    is the number of times the integer i appeared in a[]. Assuming the values
    in a[] are all between 0 and m-1, the sum of the values in the returned
    array should equal a.length.

 3. Fourier spikes. Write a program that takes a command-line argument n
    and plots the function (cos(t) + cos(2 t) + cos(3 t) + … + cos(n t)) / n
    for 500 equally spaced samples of t from -10 to 10 (in radians).
    Run your program for n = 5 and n = 500. Note : You will observe that
    the sum converges to a spike (0 everywhere except a single value).
    This property is the basis for a proof that any smooth function can be
    expressed as a sum of sinusoids.

 4. Poker analysis. Write a StdRandom and StdStats client (with appropriate
    static methods of its own) to estimate the probabilities of getting one
    pair, two pair, three of a kind, a full house, and a flush in a five-card
    poker hand via simulation. Divide your program into appropriate static
    methods and defend your design decisions. Extra credit : Add straight
    and straight flush to the list of possibilities.




Class comments

Lesson-27
Displaying lesson.txt.
