Data Structures
Period 6
Lesson-23
Rick Platek
•
8:36 AM

lesson.txt
Text
Class comments

============================================================================
Task #1: Unit-6-FRQ
============================================================================

   Present solutions for questions 1 and 2.


  https://cscircles.cemc.uwaterloo.ca/java_visualize/#mode=display
============================================================================
Task #2: Assignment-31
============================================================================
1(a)

      public static String method1(int n){
	if (n == 0) return "";
	String temp = method1(n/2);
	if (n%2 == 0) return temp + temp;
	else          return temp + temp + "x";
    }

     Doubling Test Results
     ****** Method 1 ******************
   size    time ratio
        1    0.00 0.00
        2    0.03 Infinity
        4    0.00 0.00
        8    0.00  NaN
       16    0.00  NaN
       32    0.00  NaN
       64    0.00 Infinity
      128    0.00 0.00
      256    0.00  NaN
      512    0.00  NaN
     1024    0.00  NaN
     2048    0.00  NaN
     4096    0.00  NaN
     8192    0.00  NaN
    16384    0.00  NaN
    32768    0.00  NaN
    65536    0.00  NaN
   131072    0.00 Infinity
   262144    0.00 0.00
   524288    0.00 Infinity
  1048576    0.00 1.00
  2097152    0.00 2.00
  4194304    0.01 3.00
  8388608    0.01 1.67
 16777216    0.02 1.80
 33554432    0.04 2.17
 67108864    0.07 1.67
134217728    0.14 2.15
268435456    0.28 1.98
536870912    0.44 1.60
-----------------------------------------------------------------------

(b)
   public static String method2(int n){
	String s = "";
	for (int i = 0; i < n; i++)
	    s = s + "x";
	return s;
    }

   ****** Method 2 ******************
   size    time ratio
      1    0.00 0.00
      2    0.00  NaN
      4    0.00  NaN
      8    0.00  NaN
     16    0.00  NaN
     32    0.00  NaN
     64    0.00  NaN
    128    0.00  NaN
    256    0.00 Infinity
    512    0.00 2.00
   1024    0.00 0.50
   2048    0.00 2.00
   4096    0.01 2.50
   8192    0.02 4.80
  16384    0.06 2.63
  32768    0.13 2.13
  65536    0.59 4.40
 131072    1.53 2.59
 262144    5.59 3.65

-----------------------------------------------------------------------
(c)
     public static String method3(int n){
	if (n == 0) return "";
	if (n == 1) return  "x";
	return method3(n/2) + method3(n - n / 2);
    }

   ****** Method 3 ******************
   size    time ratio
        1    0.00  NaN
        2    0.04 Infinity
        4    0.00 0.00
        8    0.00  NaN
       16    0.00  NaN
       32    0.00  NaN
       64    0.00 Infinity
      128    0.00 0.00
      256    0.00 Infinity
      512    0.00 2.00
     1024    0.00 1.50
     2048    0.00 0.67
     4096    0.00 1.00
     8192    0.00 1.00
    16384    0.01 2.50
    32768    0.01 1.80
    65536    0.00 0.33
   131072    0.02 5.67
   262144    0.01 0.53
   524288    0.03 3.00
  1048576    0.06 2.07
  2097152    0.08 1.41
  4194304    0.13 1.68
  8388608    0.33 2.45
 16777216    0.63 1.94
 33554432    1.13 1.79
 67108864    2.01 1.77
134217728    3.90 1.94
268435456    8.16 2.09
536870912   16.23 1.99

-----------------------------------------------------------------------
(d)
 public static String method4(int n){
	char [] temp = new char[n];
	for (int i  = 0; i < n; i++){
	    temp[i] = 'x';
	}
	return new String(temp);

    }

****** Method 4 ******************
   size    time ratio
        1    0.00 0.00
        2    0.00  NaN
        4    0.00  NaN
        8    0.00  NaN
       16    0.00  NaN
       32    0.00  NaN
       64    0.00  NaN
      128    0.00  NaN
      256    0.00  NaN
      512    0.00  NaN
     1024    0.00  NaN
     2048    0.00  NaN
     4096    0.00  NaN
     8192    0.00  NaN
    16384    0.00 Infinity
    32768    0.00 2.00
    65536    0.00 0.50
   131072    0.00 1.00
   262144    0.00 3.00
   524288    0.01 1.67
  1048576    0.01 1.60
  2097152    0.00 0.50
  4194304    0.01 2.25
  8388608    0.02 2.00
 16777216    0.04 1.94
 33554432    0.06 1.71
 67108864    0.13 2.08
134217728    0.27 2.14
268435456    0.44 1.66
536870912    0.98 2.22

===========================================================================
2.
(a)
    public static String reverse1(String s){
	int n = s.length();
	String reverse = "";
	for (int i = 0; i < n; i++){
	    reverse = s.charAt(i) + reverse;
	}
	return reverse;
    }

****** Reverse 1 ******************
   size    time ratio
      1    0.00 0.00
      2    0.00  NaN
      4    0.00  NaN
      8    0.00  NaN
     16    0.00  NaN
     32    0.00 Infinity
     64    0.00 0.00
    128    0.00  NaN
    256    0.00 Infinity
    512    0.00 2.00
   1024    0.00 1.00
   2048    0.00 1.50
   4096    0.01 2.33
   8192    0.03 3.86
  16384    0.06 2.30
  32768    0.14 2.23
  65536    0.59 4.24
 131072    1.54 2.64
 262144    5.70 3.70
 524288   23.86 4.18
-----------------------------------------------------------------------
(b)
    public static String reverse2(String s){
              int n = s.length();
              if (n <= 1) return s;
              String left = s.substring(0,n/2);
              String right = s.substring(n/2, n);
              return reverse2(right) + reverse2(left);
        }

 ****** Reverse 2 ******************
   size    time ratio
        1    0.00  NaN
        2    0.00  NaN
        4    0.00  NaN
        8    0.00  NaN
       16    0.00  NaN
       32    0.00 Infinity
       64    0.00 1.00
      128    0.00 1.00
      256    0.00 1.00
      512    0.00 1.00
     1024    0.00 1.00
     2048    0.00 1.00
     4096    0.00 2.00
     8192    0.00 2.00
    16384    0.01 2.00
    32768    0.01 1.50
    65536    0.03 2.58
   131072    0.02 0.58
   262144    0.03 1.89
   524288    0.07 2.03
  1048576    0.07 1.00
  2097152    0.18 2.54
  4194304    0.32 1.83
  8388608    0.65 2.02
 16777216    1.20 1.86
 33554432    2.08 1.73
 67108864    4.30 2.07
134217728    8.44 1.96
268435456   17.57 2.08




4. (Interview Question)

  If you're ready for a real algorithmic challenge, write the method

    public static int findMajorityElement(int [] array)

  that takes an array of nonnegative integers and returns the majority
  elment, which is defined to be a value that occurs in an absolute
  majority of the element positions. If no majority element exists,
  the method should return -1 to signal that fact. Your method must
  also meet the following conditions:

     - It must run in O(N) time.
     - It must use O(1) additional space. In other words, it may use
       individual temporary variables but may not allocate any additional
       array storage. Moreover, this condition rules out recursive solutions,
       because the space required for stack frames grows with the depth
       of the recursion.
     - It must not change any of the values in the array.

  The hard part about this problem is coming up with the algorithm, not
  implementing it. Play with some sample arrays and see if you can come
  up with an effective strategy that satisfies the conditions.


==============================================================================
Task #3: Things to do.
==============================================================================

     1. Assigment-32 due Friday
     2. Problem-set-09 due Friday (you may work with you group)
     3. Unit-7-FRQ - go over Friday



Need more work???

1. Go to https://visualgo.net/en
   work through the Sorting Module.



2. Here's another interview question

If you enjoyed the findMarjority Element problem, here's an even
more challenging one that used to be an interview question at Microsoft.
Suppose that you have an array of N elements, in which each element has a
value in the inclusive range 1 to N-1. Given that there are N elements
in the array and only N-1 possible values to store in each slot, there
must be at least one value that is duplicated in the array. There may,
of course, be many duplicated values, but you know that there must be at
least one by virtue of what mathematicians call the "pigeonhole principle":
if you have more items to put into a set of pigeonholes than the number
of pigeonholes, there must be some pigeonhole that ends up with more
than one item.

Your task in this problem is to write a method

        public static int findDuplicate(int [] array)


that takes an array whose values are constrained to be in the 1 to N-1
range and returns one of the duplicated values. The hard part of this
problem is to design an algorithm so that your implementation adheres
to the same set of conditionns as the solution to the findMarjority
element probelm.

   - It must run in O(N) time.
   - It must use O(1) additional space.
   - It must not change any of the values in the array.
lesson.txt
Displaying lesson.txt.Marking as done…
